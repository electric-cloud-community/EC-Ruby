# -*-Perl-*-

# ruby-RunRuby.ntest -
#
# ECRuby
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/../../EC-Ruby/systemtest/ruby-common.ntest";


$::grunRubyCreated = 0;
$::gProjectImported = 0;

#stores the result wheter the result of the procedure is success or error
my $outcome = "";

sub importProject() {
    assertOK($::N->import(
                     { file =>"$::gTestFileDir/import.xml",
               path  => "/projects/Ruby",
               force => 1
             } ), "import runRubyCommandLine");
   
assertOK($::N->getProcedure("Ruby", "runCommand"),"runCommand procedure exists");
assertOK($::N->getProcedure("Ruby", "runCommandAdditionalCommands"),"runCommandAdditionalCommands procedure exists");
assertOK($::N->getProcedure("Ruby", "runFile"),"runFile procedure exists");
$::gProjectImported = 1;
}



sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

}

#correctRubySyntax 

#Test a ruby command with a correct syntax 

ntest "runCommand", {}, sub {
    doSetup();
    # run test job
    my $xpath = $::N->runProcedure("Ruby", 
        { procedureName => "runCommand",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => []
        });
    # make sure it finished
    my $jobId = 0;
    my $status = "";
             
    assertOK($xpath, "runProcedure with errors");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
         
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
         
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    # get the job details
    $xpath = $::N->getJobDetails($jobId);
 
    # get the value of the rubyCommandLine property
    my $cmd = $xpath->findvalue("//property[propertyName='rubyCommandLine']/value");
 
     # make sure the $cmd is what was expected
     assertEq(qq{ruby -e 'puts("Hello World");'}, $cmd, "ruby correct syntax");  
};

ntest "runCommandAdditionalCommands", {}, sub {
    doSetup();
    # run test job
    my $xpath = $::N->runProcedure("Ruby", 
        { procedureName => "runCommandAdditionalCommands",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => []
        });
    # make sure it finished
    my $jobId = 0;
    my $status = "";
             
    assertOK($xpath, "runProcedure with errors");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
         
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
         
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    # get the job details
    $xpath = $::N->getJobDetails($jobId);
 
    # get the value of the rubyCommandLine property
    my $cmd = $xpath->findvalue("//property[propertyName='rubyCommandLine']/value");
 
     # make sure the $cmd is what was expected
     assertEq(qq{ruby -e 'puts("Hello World");' -v}, $cmd, "ruby correct syntax");  
};

ntest "runFile", {}, sub {
    doSetup();
    # run test job
    my $xpath = $::N->runProcedure("Ruby", 
        { procedureName => "runFile",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => []
        });
    # make sure it finished
    my $jobId = 0;
    my $status = "";
             
    assertOK($xpath, "runProcedure with errors");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
         
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
         
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    # get the job details
    $xpath = $::N->getJobDetails($jobId);
 
    # get the value of the rubyCommandLine property
    my $cmd = $xpath->findvalue("//property[propertyName='rubyCommandLine']/value");
 
     # make sure the $cmd is what was expected
     assertEq(qq{ruby "/home/carlos/Desktop/hello.rb"}, $cmd, "ruby correct syntax");  
};
  
 
